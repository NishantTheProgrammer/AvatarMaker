{"version":3,"sources":["logo.svg","Body/Body.js","Selector/Selector.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","body","props","id","style","backgroundImage","bodyImg","className","src","glassImg","mousetachImg","lipImg","selector","class","role","aria-label","type","onClick","change","App","state","selectorIndex","noOfImages","imgIndex","leftIndex","setState","rightIndex","changeSelector","selected","this","Selector","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,uJCyB5BC,G,YAtBF,SAAAC,GACT,OACI,yBAAKC,GAAG,cACJC,MAAO,CACHC,gBAAgB,OAAD,OAASH,EAAMI,QAAf,OAGnB,yBAAKH,GAAG,YAAYC,MAAO,CACvBC,gBAAgB,qCAGhB,yBAAKE,UAAU,UAAUJ,GAAG,QAAQK,IAAKN,EAAMO,WAC/C,yBAAKF,UAAU,UAAUJ,GAAG,YAAYK,IAAKN,EAAMQ,eACnD,yBAAKH,UAAU,UAAUJ,GAAG,MAAMK,IAAKN,EAAMS,aCK9CC,EAnBE,SAAAV,GACb,OACI,yBAAKW,MAAM,YAAYC,KAAK,QAAQC,aAAW,iBAC3C,4BAAQC,KAAK,SAASH,MAAM,oBAE5BI,QAAS,WAAOf,EAAMgB,OAAO,KAF7B,QAMA,4BAAQF,KAAK,SAASH,MAAM,oBAC5BI,QAAS,WAAOf,EAAMgB,OAAO,KAD7B,SAEA,4BAAQF,KAAK,SAASH,MAAM,oBAC5BI,QAAS,WAAOf,EAAMgB,OAAO,KAD7B,QAEA,4BAAQF,KAAK,SAASH,MAAM,oBAC5BI,QAAS,WAAOf,EAAMgB,OAAO,KAD7B,iBCsEGC,G,kNA5EbC,MAAQ,CACNR,SAAU,CACR,oBACA,qBACA,oBACA,4BAEFS,cAAe,EACfC,WAAY,CAAC,EAAG,EAAG,EAAG,GACtBC,SAAU,CAAC,EAAG,EAAG,EAAG,I,EAGtBC,UAAY,WACV,IAAID,EAAQ,YAAO,EAAKH,MAAMG,UAC9B,GAAGA,EAAS,EAAKH,MAAMC,gBAAkB,EAMvC,OALAE,EAAS,EAAKH,MAAMC,eAAiB,EAAKD,MAAME,WAAW,EAAKF,MAAMC,oBAEtE,EAAKI,SAAS,CACZF,aAIJA,EAAS,EAAKH,MAAMC,iBACpB,EAAKI,SAAS,CACZF,c,EAGJG,WAAa,WACX,IAAIH,EAAQ,YAAO,EAAKH,MAAMG,UAC9BA,EAAS,EAAKH,MAAMC,eACnB,EAAKD,MAAMG,SAAS,EAAKH,MAAMC,eAC9B,EAAKD,MAAME,WAAW,EAAKF,MAAMC,eAAkB,EACrD,EAAKI,SAAS,CACZF,c,EAIJI,eAAiB,SAAAC,GACf,EAAKH,SAAS,CAACJ,cAAeO,K,uDAO9B,OAEA,yBAAKrB,UAAU,OACf,kBAAC,EAAD,CAEAD,QACCuB,KAAKT,MAAMR,SAAS,GAAKiB,KAAKT,MAAMG,SAAS,GAAK,OAEnDd,SAAUoB,KAAKT,MAAMR,SAAS,GAAKiB,KAAKT,MAAMG,SAAS,GAAK,OAC5DZ,OAAQkB,KAAKT,MAAMR,SAAS,GAAKiB,KAAKT,MAAMG,SAAS,GAAK,OAC1Db,aAAcmB,KAAKT,MAAMR,SAAS,GAAKiB,KAAKT,MAAMG,SAAS,GAAK,SAOhE,kBAACO,EAAD,CAAUZ,OAAQW,KAAKF,iBAGvB,yBAAKxB,GAAG,OACN,4BAAQa,KAAK,SAASH,MAAM,oBAAoBI,QAASY,KAAKL,WAA9D,KACA,4BAAQR,KAAK,SAASH,MAAM,oBAAoBI,QAASY,KAAKH,YAA9D,W,GArEYK,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3b8b833.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './Body.css';\r\n\r\nconst body = props => {\r\n    return (\r\n        <div id=\"person-body\"\r\n            style={{\r\n                backgroundImage: `url(${props.bodyImg})`\r\n            }}\r\n        >\r\n            <div id=\"structure\" style={{\r\n                backgroundImage: `url('./Resources/structure.png')`\r\n                }}>\r\n            \r\n                <img className=\"faceEle\" id=\"glass\" src={props.glassImg}></img>\r\n                <img className=\"faceEle\" id=\"mousetach\" src={props.mousetachImg}></img>\r\n                <img className=\"faceEle\" id=\"lip\" src={props.lipImg}></img>\r\n            \r\n            </div>\r\n\r\n    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default body","import React from 'react'\r\n\r\nconst selector = props => {\r\n    return (\r\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n            <button type=\"button\" class=\"btn btn-secondary\"\r\n            \r\n            onClick={() => {props.change(0)}}\r\n            \r\n            \r\n            >Body</button>\r\n            <button type=\"button\" class=\"btn btn-secondary\"\r\n            onClick={() => {props.change(1)}}>Glass</button>\r\n            <button type=\"button\" class=\"btn btn-secondary\"\r\n            onClick={() => {props.change(2)}}>Lips</button>\r\n            <button type=\"button\" class=\"btn btn-secondary\"\r\n            onClick={() => {props.change(3)}}>Mousetaches</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default selector;\r\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport Body from './Body/Body'\nimport Selector from './Selector/Selector'\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    selector: [\n      \"./Resources/body/\",\n      \"./Resources/glass/\",\n      \"./Resources/lips/\",\n      \"./Resources/mousetaches/\"\n    ],\n    selectorIndex: 0,\n    noOfImages: [3, 7, 6, 4],\n    imgIndex: [1, 1, 1, 1]\n  }\n\n  leftIndex = () =>{\n    let imgIndex = [...this.state.imgIndex]\n    if(imgIndex[this.state.selectorIndex] <= 1){\n      imgIndex[this.state.selectorIndex] = this.state.noOfImages[this.state.selectorIndex]\n\n      this.setState({\n        imgIndex\n      })\n      return\n    }\n    imgIndex[this.state.selectorIndex]--;\n    this.setState({\n      imgIndex\n    })\n  }\n  rightIndex = () =>{\n    let imgIndex = [...this.state.imgIndex]\n    imgIndex[this.state.selectorIndex] = \n    (this.state.imgIndex[this.state.selectorIndex] % \n      this.state.noOfImages[this.state.selectorIndex]) + 1\n    this.setState({\n      imgIndex\n    })\n  }\n\n  changeSelector = selected => {\n    this.setState({selectorIndex: selected})\n  }\n\n\n\n  \n  render() {\n    return (\n      \n    <div className=\"App\">\n    <Body \n    \n    bodyImg=\n    {this.state.selector[0] + this.state.imgIndex[0] + \".jpg\"}\n\n    glassImg={this.state.selector[1] + this.state.imgIndex[1] + \".png\"}\n    lipImg={this.state.selector[2] + this.state.imgIndex[2] + \".png\"}\n    mousetachImg={this.state.selector[3] + this.state.imgIndex[3] + \".png\"}\n\n\n    \n    \n    \n    ></Body>\n    <Selector change={this.changeSelector}></Selector>\n    \n\n    <div id=\"nav\">\n      <button type=\"button\" class=\"btn btn-secondary\" onClick={this.leftIndex}>&lt;</button>\n      <button type=\"button\" class=\"btn btn-secondary\" onClick={this.rightIndex}>&gt;</button>\n\n    </div>\n  </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}